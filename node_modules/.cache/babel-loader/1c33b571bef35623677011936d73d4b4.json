{"ast":null,"code":"import store from \"../store/store\";\nimport { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream, setIsUserJoinedOnlyWithAudio } from \"../store/actions/roomActions\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nexport const createNewRoom = () => {\n  const successCalbackFunc = () => {\n    store.dispatch(setOpenRoom(true, true));\n    const audioOnly = store.getState().room.audioOnly;\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\n    socketConnection.createNewRoom();\n  };\n  const audioOnly = store.getState().room.audioOnly;\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\n};\nexport const newRoomCreated = data => {\n  const {\n    roomDetails\n  } = data;\n  store.dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => {\n  var _store$getState$auth$;\n  const {\n    activeRooms\n  } = data;\n  const friends = store.getState().friends.friends;\n  const rooms = [];\n  const userId = (_store$getState$auth$ = store.getState().auth.userDetails) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$._id;\n  activeRooms.forEach(room => {\n    const isRoomCreatedByMe = room.roomCreator.userId === userId;\n    if (isRoomCreatedByMe) {\n      rooms.push({\n        ...room,\n        creatorUsername: \"Me\"\n      });\n    } else {\n      friends.forEach(f => {\n        if (f.id === room.roomCreator.userId) {\n          rooms.push({\n            ...room,\n            creatorUsername: f.username\n          });\n        }\n      });\n    }\n  });\n  store.dispatch(setActiveRooms(rooms));\n};\nexport const joinRoom = roomId => {\n  const successCalbackFunc = () => {\n    store.dispatch(setRoomDetails({\n      roomId\n    }));\n    store.dispatch(setOpenRoom(false, true));\n    const audioOnly = store.getState().room.audioOnly;\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n  const audioOnly = store.getState().room.audioOnly;\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\n};\nexport const leaveRoom = () => {\n  const roomId = store.getState().room.roomDetails.roomId;\n  const localStream = store.getState().room.localStream;\n  if (localStream) {\n    localStream.getTracks().forEach(track => track.stop());\n    store.dispatch(setLocalStream(null));\n  }\n  const screenSharingStream = store.getState().room.screenSharingStream;\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach(track => track.stop());\n    store.dispatch(setScreenSharingStream(null));\n  }\n  store.dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n  socketConnection.leaveRoom({\n    roomId\n  });\n  store.dispatch(setRoomDetails(null));\n  store.dispatch(setOpenRoom(false, false));\n};","map":{"version":3,"names":["store","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","setIsUserJoinedOnlyWithAudio","socketConnection","webRTCHandler","createNewRoom","successCalbackFunc","dispatch","audioOnly","getState","room","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","_store$getState$auth$","activeRooms","friends","rooms","userId","auth","userDetails","_id","forEach","isRoomCreatedByMe","roomCreator","push","creatorUsername","f","id","username","joinRoom","roomId","leaveRoom","localStream","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/home/sameeramp/Videos/Zync-Frontend/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import store from \"../store/store\";\r\nimport {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n  setIsUserJoinedOnlyWithAudio,\r\n} from \"../store/actions/roomActions\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = () => {\r\n  const successCalbackFunc = () => {\r\n    store.dispatch(setOpenRoom(true, true));\r\n\r\n    const audioOnly = store.getState().room.audioOnly;\r\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\r\n    socketConnection.createNewRoom();\r\n  };\r\n\r\n  const audioOnly = store.getState().room.audioOnly;\r\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\r\n};\r\n\r\nexport const newRoomCreated = (data) => {\r\n  const { roomDetails } = data;\r\n  store.dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => {\r\n  const { activeRooms } = data;\r\n\r\n  const friends = store.getState().friends.friends;\r\n  const rooms = [];\r\n\r\n  const userId = store.getState().auth.userDetails?._id;\r\n\r\n  activeRooms.forEach((room) => {\r\n    const isRoomCreatedByMe = room.roomCreator.userId === userId;\r\n\r\n    if (isRoomCreatedByMe) {\r\n      rooms.push({ ...room, creatorUsername: \"Me\" });\r\n    } else {\r\n      friends.forEach((f) => {\r\n        if (f.id === room.roomCreator.userId) {\r\n          rooms.push({ ...room, creatorUsername: f.username });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  store.dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId) => {\r\n  const successCalbackFunc = () => {\r\n    store.dispatch(setRoomDetails({ roomId }));\r\n    store.dispatch(setOpenRoom(false, true));\r\n    const audioOnly = store.getState().room.audioOnly;\r\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n\r\n  const audioOnly = store.getState().room.audioOnly;\r\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\r\n};\r\n\r\nexport const leaveRoom = () => {\r\n  const roomId = store.getState().room.roomDetails.roomId;\r\n\r\n  const localStream = store.getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = store.getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setScreenSharingStream(null));\r\n  }\r\n\r\n  store.dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  store.dispatch(setRoomDetails(null));\r\n  store.dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}